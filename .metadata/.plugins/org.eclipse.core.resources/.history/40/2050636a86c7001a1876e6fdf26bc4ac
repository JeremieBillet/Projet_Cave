package com.intiformation.projet.caveavin.controller;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.annotation.PostConstruct;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;

import org.primefaces.event.SlideEndEvent;
import org.primefaces.model.menu.DefaultMenuColumn;
import org.primefaces.model.menu.DefaultMenuItem;
import org.primefaces.model.menu.DefaultMenuModel;
import org.primefaces.model.menu.DefaultSubMenu;
import org.primefaces.model.menu.MenuModel;

import com.intiformation.projet.caveavin.dao.AlcoolDAOImpl;
import com.intiformation.projet.caveavin.dao.CategorieDAOImpl;
import com.intiformation.projet.caveavin.dao.IAlcoolDAO;
import com.intiformation.projet.caveavin.dao.ICategorieDAO;
import com.intiformation.projet.caveavin.modele.Biere;
import com.intiformation.projet.caveavin.modele.CatPays;
import com.intiformation.projet.caveavin.modele.CatRegion;
import com.intiformation.projet.caveavin.modele.CatType;
import com.intiformation.projet.caveavin.modele.Categorie;
import com.intiformation.projet.caveavin.modele.Champagne;
import com.intiformation.projet.caveavin.modele.Spiritueux;
import com.intiformation.projet.caveavin.modele.Vin;

@ManagedBean(name = "produitBean", eager = true)
@SessionScoped
public class ProduitBean implements Serializable {

	/* __________________props__________________ */

	private MenuModel model;
	private String produitRecherche;
	double prixMax;
	double prixFiltre;

	private IAlcoolDAO alcoolDao;
	private ICategorieDAO catDao;

	private List<Vin> listeVin;
	private List<Champagne> listeChampagne;
	private List<Spiritueux> listeSpiriteux;
	private List<Biere> listeBiere;


	
	private List<Categorie> listeRegionVin;
	private List<Categorie> listeTypeVin;
	private List<Categorie> listePaysVin;
	private List<Categorie> listeTypeChampagne;
	private List<Categorie> listeTypeSpiritueux;
	private List<Categorie> listePaysSpiritueux;
	private List<Categorie> listeTypeBiere;
	private List<Categorie> listePaysBiere;

	/* __________________ctors__________________ */
	public ProduitBean() {
		alcoolDao = new AlcoolDAOImpl();
		catDao = new CategorieDAOImpl();
	}

	/* _________________methodes________________ */
	@PostConstruct
	public void init() {
		produitRecherche = "Vin";
		initFilter();

		listeRegionVin = catDao.getByClassNameAndAlcool("catRegion", "Vin");
		listeTypeVin = catDao.getByClassNameAndAlcool("catType", "Vin");
		listePaysVin = catDao.getByClassNameAndAlcool("catPays", "Vin");
		listeTypeChampagne = catDao.getByClassNameAndAlcool("catType", "Champagne");
		listeTypeSpiritueux = catDao.getByClassNameAndAlcool("catType", "Spiritueux");
		listePaysSpiritueux = catDao.getByClassNameAndAlcool("catPays", "Spiritueux");
		listeTypeBiere = catDao.getByClassNameAndAlcool("catType", "Biere");
		listePaysBiere = catDao.getByClassNameAndAlcool("catPays", "Biere");

		creationModelMenu();

	}

	public void creationModelMenu() {
		model = new DefaultMenuModel();
		DefaultSubMenu Submenu;
		DefaultMenuItem item;

		// ------------------ submenu Vin ------------
		Submenu = new DefaultSubMenu("Vin");

		ajoutColonne(Submenu, listePaysVin, "Par Pays");
		ajoutColonne(Submenu, listeRegionVin, "Par Région");
		ajoutColonne(Submenu, listeTypeVin, "Par Type");
		ajoutColonne(Submenu, "Tous les vins");

		model.getElements().add(Submenu);

		// --------------- submenu Champagne ------------
		Submenu = new DefaultSubMenu("Champagne");

		ajoutColonne(Submenu, listeTypeChampagne, "Par Type");
		ajoutColonne(Submenu, "Tous les champagnes");

		model.getElements().add(Submenu);

		// --------------- submenu Spiritueux ------------
		Submenu = new DefaultSubMenu("Spiritueux");

		ajoutColonne(Submenu, listeTypeSpiritueux, "Par Type");
		ajoutColonne(Submenu, listePaysSpiritueux, "Par Pays");
		ajoutColonne(Submenu, "Tous les spiritueux");

		model.getElements().add(Submenu);

		// --------------- submenu Biere ------------
		Submenu = new DefaultSubMenu("Bière");

		ajoutColonne(Submenu, listeTypeBiere, "Par Type");
		ajoutColonne(Submenu, listePaysBiere, "Par Pays");
		ajoutColonne(Submenu, "Toutes les bières");

		model.getElements().add(Submenu);

		// --------------- submenu Promo ------------
		item = new DefaultMenuItem("Promo");
		model.getElements().add(item);

		// --------------- submenu Gestion ------------
		item = new DefaultMenuItem("GESTION");
		model.getElements().add(item);
	}

	public void ajoutColonne(DefaultSubMenu submenu, List<Categorie> listeCat, String label) {
		DefaultMenuColumn column;
		DefaultSubMenu columnMenu;
		DefaultMenuItem item;

		column = new DefaultMenuColumn();
		columnMenu = new DefaultSubMenu(label);
		columnMenu.setStyleClass("control-label");

		for (Categorie catItem : listeCat) {
			item = new DefaultMenuItem(catItem.getNomObjetCat());
			item.setCommand("#{produitBean.selectByCat}");
			Map<String, List<String>> parameters = new HashMap<String, List<String>>() {
				{
					put("label", new ArrayList<String>(Arrays.asList(submenu.getLabel())));
					put("catId", new ArrayList<String>(Arrays.asList(Integer.toString(catItem.getIdCategorie()))));
				}
			};
			item.setParams(parameters);
			columnMenu.getElements().add(item);
		}

		column.getElements().add(columnMenu);
		submenu.getElements().add(column);
	}

	public void ajoutColonne(DefaultSubMenu submenu, String label) {
		DefaultMenuColumn column;
		DefaultSubMenu columnMenu;
		DefaultMenuItem item;

		column = new DefaultMenuColumn();
		columnMenu = new DefaultSubMenu(" ");
		columnMenu.setStyleClass("control-label");

		item = new DefaultMenuItem(label);
		item.setCommand("#{produitBean.selectByCat}");
		Map<String, List<String>> parameters = new HashMap<String, List<String>>() {
			{
				put("label", new ArrayList<String>(Arrays.asList(submenu.getLabel())));
				put("catId", new ArrayList<String>(Arrays.asList("0")));
			}
		};
		item.setParams(parameters);
		columnMenu.getElements().add(item);

		column.getElements().add(columnMenu);
		submenu.getElements().add(column);
	}

	public String selectByCat() {
		Map<String, String> params = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
		produitRecherche = params.get("label");
		int catId = Integer.parseInt(params.get("catId"));

		initFilter();

		if (produitRecherche.equals("Vin") && catId != 0) {
			Categorie cat = catDao.getById(Integer.parseInt(params.get("catId")));
			if (cat instanceof CatPays)
				filterVinByPays(cat.getIdCategorie());
			if (cat instanceof CatRegion)
				filterVinByRegion(cat.getIdCategorie());
			if (cat instanceof CatType)
				filterVinByType(cat.getIdCategorie());
		}

		if (produitRecherche.equals("Champagne") && catId != 0) {
			Categorie cat = catDao.getById(Integer.parseInt(params.get("catId")));
			if (cat instanceof CatType)
				filterChampagneByType(cat.getIdCategorie());
		}

		if (produitRecherche.equals("Spiritueux") && catId != 0) {
			Categorie cat = catDao.getById(Integer.parseInt(params.get("catId")));
			if (cat instanceof CatPays)
				filterSpiritueuxByPays(cat.getIdCategorie());
			if (cat instanceof CatType)
				filterSpiritueuxByType(cat.getIdCategorie());
		}

		if (produitRecherche.equals("Bière") && catId != 0) {
			Categorie cat = catDao.getById(Integer.parseInt(params.get("catId")));
			if (cat instanceof CatPays)
				filterBiereByPays(cat.getIdCategorie());
			if (cat instanceof CatType)
				filterBiereByType(cat.getIdCategorie());
		}

		return "index?faces-redirect=true";
	}

	public void initFilter() {
		listeChampagne = null;
		listeSpiriteux = null;
		listeBiere = null;
		listeVin = null;


		if (produitRecherche.equals("Vin")) {
			listeVin = alcoolDao.getAllVin();

			prixMax = listeVin.stream().max((v1, v2) -> Double.compare(v1.getPrix(), v2.getPrix())).get().getPrix();
			prixFiltre = prixMax;
		}
		if (produitRecherche.equals("Champagne")) {
			listeChampagne = alcoolDao.getAllChampagne();

			prixMax = listeChampagne.stream().max((v1, v2) -> Double.compare(v1.getPrix(), v2.getPrix())).get()
					.getPrix();
			prixFiltre = prixMax;
		}
		if (produitRecherche.equals("Spiritueux")) {
			listeSpiriteux = alcoolDao.getAllSpiritueux();

			prixMax = listeSpiriteux.stream().max((v1, v2) -> Double.compare(v1.getPrix(), v2.getPrix())).get()
					.getPrix();
			prixFiltre = prixMax;
		}
		if (produitRecherche.equals("Bière")) {
			listeBiere = alcoolDao.getAllBiere();

			prixMax = listeBiere.stream().max((v1, v2) -> Double.compare(v1.getPrix(), v2.getPrix())).get().getPrix();
			prixFiltre = prixMax;
		}

	}

	public void onSlideEnd(SlideEndEvent event) {
		prixFiltre = event.getValue();
	}

	public void filterByPrix() {
		if (produitRecherche.equals("Vin")) {
			listeVin = listeVin.stream().filter(v -> v.getPrix() <= prixFiltre).collect(Collectors.toList());
		}
		if (produitRecherche.equals("Champagne")) {
			listeChampagne = listeChampagne.stream().filter(v -> v.getPrix() <= prixFiltre)
					.collect(Collectors.toList());
		}
		if (produitRecherche.equals("Spiritueux")) {
			listeSpiriteux = listeSpiriteux.stream().filter(v -> v.getPrix() <= prixFiltre)
					.collect(Collectors.toList());
		}
		if (produitRecherche.equals("Bière")) {
			listeBiere = listeBiere.stream().filter(v -> v.getPrix() <= prixFiltre).collect(Collectors.toList());
		}
	}

	public void filterVinByPays(int paysId) {
		listeVin = listeVin.stream().filter(v -> v.getPays().getIdCategorie() == paysId).collect(Collectors.toList());
	}

	public void filterVinByRegion(int regionId) {
		listeVin = listeVin.stream().filter(v -> v.getRegion().getIdCategorie() == regionId)
				.collect(Collectors.toList());
	}

	public void filterVinByType(int typeId) {
		listeVin = listeVin.stream().filter(v -> v.getType().getIdCategorie() == typeId).collect(Collectors.toList());
	}

	public void filterChampagneByType(int typeId) {
		listeChampagne = listeChampagne.stream().filter(c -> c.getType().getIdCategorie() == typeId)
				.collect(Collectors.toList());
	}

	public void filterSpiritueuxByPays(int paysId) {
		listeSpiriteux = listeSpiriteux.stream().filter(s -> s.getPays().getIdCategorie() == paysId)
				.collect(Collectors.toList());
	}

	public void filterSpiritueuxByType(int typeId) {
		listeSpiriteux = listeSpiriteux.stream().filter(s -> s.getType().getIdCategorie() == typeId)
				.collect(Collectors.toList());
	}

	public void filterBiereByPays(int paysId) {
		listeBiere = listeBiere.stream().filter(b -> b.getPays().getIdCategorie() == paysId)
				.collect(Collectors.toList());
	}

	public void filterBiereByType(int typeId) {
		listeBiere = listeBiere.stream().filter(b -> b.getType().getIdCategorie() == typeId)
				.collect(Collectors.toList());
	}

	/* _____________getters/setters_____________ */
	public List<Vin> getListeVin() {
		return listeVin;
	}

	public void setListeVin(List<Vin> listeVin) {
		this.listeVin = listeVin;
	}

	public MenuModel getModel() {
		return model;
	}

	public String getProduitRecherche() {
		return produitRecherche;
	}

	public void setProduitRecherche(String produitRecherche) {
		this.produitRecherche = produitRecherche;
	}

	public List<Categorie> getListeRegionVin() {
		return listeRegionVin;
	}

	public void setListeRegionVin(List<Categorie> listeRegionVin) {
		this.listeRegionVin = listeRegionVin;
	}

	public List<Categorie> getListeTypeVin() {
		return listeTypeVin;
	}

	public void setListeTypeVin(List<Categorie> listeTypeVin) {
		this.listeTypeVin = listeTypeVin;
	}

	public List<Categorie> getListePaysVin() {
		return listePaysVin;
	}

	public void setListePaysVin(List<Categorie> listePaysVin) {
		this.listePaysVin = listePaysVin;
	}

	public List<Categorie> getListeTypeChampagne() {
		return listeTypeChampagne;
	}

	public void setListeTypeChampagne(List<Categorie> listeTypeChampagne) {
		this.listeTypeChampagne = listeTypeChampagne;
	}

	public List<Categorie> getListeTypeSpiritueux() {
		return listeTypeSpiritueux;
	}

	public void setListeTypeSpiritueux(List<Categorie> listeTypeSpiritueux) {
		this.listeTypeSpiritueux = listeTypeSpiritueux;
	}

	public List<Categorie> getListePaysSpiritueux() {
		return listePaysSpiritueux;
	}

	public void setListePaysSpiritueux(List<Categorie> listePaysSpiritueux) {
		this.listePaysSpiritueux = listePaysSpiritueux;
	}

	public List<Categorie> getListeTypeBiere() {
		return listeTypeBiere;
	}

	public void setListeTypeBiere(List<Categorie> listeTypeBiere) {
		this.listeTypeBiere = listeTypeBiere;
	}

	public List<Categorie> getListePaysBiere() {
		return listePaysBiere;
	}

	public void setListePaysBiere(List<Categorie> listePaysBiere) {
		this.listePaysBiere = listePaysBiere;
	}

	public double getPrixMax() {
		return prixMax;
	}

	public void setPrixMax(double prixMax) {
		this.prixMax = prixMax;
	}

	public double getPrixFiltre() {
		return prixFiltre;
	}

	public void setPrixFiltre(double prixFiltre) {
		this.prixFiltre = prixFiltre;
	}

	public List<Champagne> getListeChampagne() {
		return listeChampagne;
	}

	public void setListeChampagne(List<Champagne> listeChampagne) {
		this.listeChampagne = listeChampagne;
	}

	public List<Spiritueux> getListeSpiriteux() {
		return listeSpiriteux;
	}

	public void setListeSpiriteux(List<Spiritueux> listeSpiriteux) {
		this.listeSpiriteux = listeSpiriteux;
	}

	public List<Biere> getListeBiere() {
		return listeBiere;
	}

	public void setListeBiere(List<Biere> listeBiere) {
		this.listeBiere = listeBiere;
	}

	public void setModel(MenuModel model) {
		this.model = model;
	}

	public IAlcoolDAO getAlcoolDao() {
		return alcoolDao;
	}

	public void setAlcoolDao(IAlcoolDAO alcoolDao) {
		this.alcoolDao = alcoolDao;
	}

	public ICategorieDAO getCatDao() {
		return catDao;
	}

	public void setCatDao(ICategorieDAO catDao) {
		this.catDao = catDao;
	}
	
	

}
