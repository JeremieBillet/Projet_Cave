package com.intiformation.projet.caveavin.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;

import com.intiformation.projet.caveavin.modele.Alcool;

public class AlcoolDAOImpl implements IAlcoolDAO {

	@Override
	public boolean add(Alcool pAlcool) {

		PreparedStatement ps1 = null;
		PreparedStatement ps2 = null;
		PreparedStatement ps3 = null;
		
		ResultSet rs2 = null;
		
		try {
			ps1 = this.connection.prepareStatement("INSERT INTO alcools (class_name, designation, description, prix, quantité, photo) VALUES (?, ?, ?, ?, ?, ?)");
			
			ps1.setString(1, pAlcool.getClass().getName());
			ps1.setString(2, pAlcool.getDesignation());
			ps1.setString(3, pAlcool.getDescription());
			ps1.setDouble(4, pAlcool.getPrix());
			ps1.setInt(5, pAlcool.getQuantite());
			ps1.setBytes(6, pAlcool.getPhoto());
			
			ps1.executeUpdate();
			
			ps2 = this.connection.prepareStatement("select max(id_alcool) from alcools");
			
			rs2 = ps2.executeQuery();
			
			rs2.next();
			
			int idAlcool = rs2.getInt(1);
			
			if (doesObjectContainField(pAlcool, "CatPays")) {
				ps3 = this.connection.prepareStatement("insert into alcools_categories values (?,?)");
				
				ps3.setInt(1, idAlcool);
				ps3.setInt(2, pAlcool.getCatPays());
			}
			
			if (doesObjectContainField(pAlcool, "CatPays")) {
				
			}
			
			ps3 = this.connection.prepareStatement("insert into alcools_categories values (?,?)");
			
			ps1.setInt(1, idAlcool);
			
			
			return (verifUpdate == 1);
			
			
			
		} catch (SQLException e) {
			System.out.println("... Erreur lors de l'ajout de la bière / méthode add() ...");
			e.printStackTrace();
			
		} finally {
			
			try {
				if (ps1 != null) {
					ps1.close();
				}
				
				if (ps2 != null) {
					ps2.close();
				}
				
			} catch (SQLException e) {
				e.printStackTrace();
			}//end catch
			
		}//end finally
		
		return false;
	}//end add()

	@Override
	public boolean update(Alcool pAlcool) {
		return false;
	}//end update()

	@Override
	public boolean delete(Integer pIdAlcool) {

		PreparedStatement ps = null;
		
		try {
			
			ps = this.connection.prepareStatement("DELETE FROM alcools WHERE id_alcool=?");
			
			ps.setInt(1, pIdAlcool);
			
			int verifSuppr = ps.executeUpdate();
			
			return (verifSuppr == 1);
			
		} catch (SQLException e) {
			System.out.println("... Erreur lors de la suppression / méthode delete() ...");
			e.printStackTrace();
			
		} finally {
			
			try {
				
				if (ps != null) {
					ps.close();
				}
				
			} catch (SQLException e) {
				e.printStackTrace();
			}//end catch
			
		}//end finally block
		
		return false;
	}//end delete

	@Override
	public List<Alcool> getAll() {
		return null;
	}//end getAll()

	@Override
	public Alcool getById(Integer pIdAlcool) {
		return null;
	}//end getById()

	@Override
	public Alcool getByNom(String pNomAlcool) {
		return null;
	}//end getByNom()
	
	public boolean doesObjectContainField(Object object, String fieldName) {
	    return Arrays.stream(object.getClass().getFields())
	            .anyMatch(f -> f.getName().equals(fieldName));
	}


}//end class
